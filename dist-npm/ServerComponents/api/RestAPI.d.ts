import { Request, Response, Express } from 'express';
import ApiManager = require('./ApiManager');
import BaseConnector = require('./BaseConnector');
export declare class RestAPI extends BaseConnector.BaseConnector {
    server: Express;
    baseUrl: string;
    manager: ApiManager.ApiManager;
    resourceUrl: any;
    layersUrl: any;
    keysUrl: any;
    filesUrl: any;
    searchUrl: any;
    projectsUrl: any;
    proxyUrl: any;
    tilesUrl: any;
    constructor(server: Express, baseUrl?: string);
    private getResources(req, res);
    private getTheResource(req, res);
    private createTheResource(req, res);
    private updateTheResource(req, res);
    private getLayers(req, res);
    private getTheProjects(req, res);
    private getTheProject(req, res);
    private updateTheProject(req, res);
    private createTheProject(req, res);
    private deleteTheProject(req, res);
    private addTheLayer(req, res);
    deleteTheLayer(req: Request, res: Response): void;
    private deleteTheLayer2(req, res);
    private getTheGroups(req, res);
    private createTheGroup(req, res);
    private updateTheGroup(req, res);
    private deleteTheGroup(req, res);
    private createTheLayer(req, res);
    /** Similar to createLayer, but also checks if a layer exists: Should probably be removed as it is an update! */
    private createTheLayer2(req, res);
    private getTheLayer(req, res);
    private updateTheLayer(req, res);
    private addTheFeature(req, res);
    private getTheFeature(req, res);
    private updateTheFeature(req, res);
    private deleteTheFeature(req, res);
    private searchLayers(req, res);
    private getLayerFeaturesInBBox(req, res);
    private getLayerFeaturesInSphere(req, res);
    private getLayerFeaturesInPolygon(req, res);
    private updateTheKey(req, res);
    private getTheKeys(req, res);
    private getTheKey(req, res);
    private addTheFile(req, res);
    private getTheFile(req, res);
    private addTheLogs(req, res);
    private addTheLog(req, res);
    private getTheLog(req, res);
    private deleteTheLog(req, res);
    private getLogs(req, res);
    private proxyTheUrl(req, res);
    init(layerManager: ApiManager.ApiManager, options: any, callback: Function): void;
    private getUrl(feedUrl, req, res);
    private cloneWithoutUnderscore(v);
}
